// <auto-generated />
using System;
using GameEngine.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameEngine.Migrations
{
    [DbContext(typeof(LudoContext))]
    [Migration("20210410185152_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameEngine.Dice.BaseDice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("BaseDice");
                });

            modelBuilder.Entity("GameEngine.Models.GameSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoardSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GameSettings");
                });

            modelBuilder.Entity("GameEngine.Models.PlayerSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DiceId")
                        .HasColumnType("int");

                    b.Property<int?>("GameSettingsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SelectorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiceId");

                    b.HasIndex("GameSettingsId");

                    b.HasIndex("SelectorId");

                    b.ToTable("PlayerSetting");
                });

            modelBuilder.Entity("GameEngine.Models.SaveData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SettingsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SettingsId");

                    b.ToTable("Save");
                });

            modelBuilder.Entity("GameEngine.Models.Turn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PieceID")
                        .HasColumnType("int");

                    b.Property<int?>("Roll")
                        .HasColumnType("int");

                    b.Property<int?>("SaveDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SaveDataId");

                    b.ToTable("Turn");
                });

            modelBuilder.Entity("GameEngine.Selectors.BaseSelector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("BaseSelector");
                });

            modelBuilder.Entity("GameEngine.Models.PlayerSetting", b =>
                {
                    b.HasOne("GameEngine.Dice.BaseDice", "Dice")
                        .WithMany()
                        .HasForeignKey("DiceId");

                    b.HasOne("GameEngine.Models.GameSettings", null)
                        .WithMany("Players")
                        .HasForeignKey("GameSettingsId");

                    b.HasOne("GameEngine.Selectors.BaseSelector", "Selector")
                        .WithMany()
                        .HasForeignKey("SelectorId");

                    b.Navigation("Dice");

                    b.Navigation("Selector");
                });

            modelBuilder.Entity("GameEngine.Models.SaveData", b =>
                {
                    b.HasOne("GameEngine.Models.GameSettings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsId");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("GameEngine.Models.Turn", b =>
                {
                    b.HasOne("GameEngine.Models.SaveData", null)
                        .WithMany("ExecutedTurns")
                        .HasForeignKey("SaveDataId");
                });

            modelBuilder.Entity("GameEngine.Models.GameSettings", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("GameEngine.Models.SaveData", b =>
                {
                    b.Navigation("ExecutedTurns");
                });
#pragma warning restore 612, 618
        }
    }
}
