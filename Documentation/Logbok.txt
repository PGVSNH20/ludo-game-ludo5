2021-03-30:
Martin, Robert och Sanna har tagit kontakt med varandra och diskuterat projektet i stort.
Gruppen har provspelat fia-med-knuff online för att vänja sig med reglerna.

Under diskussion efter fiaspelandet var över så kom Yan in i samtalet.
Vi har gjort en del planering kring vad vi vill ha i vårat Fia-med-Knuff 100-Person BattleRoyale Auto-Chess

-----------------------------------

2021-03-31, 09:30:
Martin har ändrat user stories filen, mest lagt till fler.
La också in lite kommentarer i Engine.cs som en grundläggande plan för programmets struktur.

10:00-11:30:
Martin, Robert, Sanna och Yan har påbörjat med att upp en grundläggande stuktur utifrån kommentarerna i Egine.cs genom att skapa klasser så som: 
Board, spelbanan
Nest, boet där alla spelare startas
Piece, spelgubbarnas egenskaper
Player, spelarens egenskaper
Square, rutorna
GameSetting. huvudmeny, där man väljer hur många som ska spelas

En Enum har skapats för färgerna och en konstant klass för spelare.

13:00 - 13:40
Yan, Sanna, Robert och Martin spelade en omgång Fia med Knuff online.
Martins dator frös under den otroliga stressen och behövde startas om.
Vem vann? Vem vet...

14:00
Isak kom in i gruppmötet vid 14:30.

Uppdatering 17:30, 2021-03-31
Hela gruppen arbetade det mesta av dagen fr.o.m. 10:00 till 16:30, med några pauser här och där för bl.a. lunch.
Vi har satt upp klasser för datamodellen som spelmotorn kommer arbeta ifrån, pjäser, spelare, spelbräde osv.
Dessutom finnns några ej-implementerade metoder i Engine, behövs nog mer fortfarande, och de kommer användas för att skriva tester så vi kan göra dem innan vi faktiskt fyller metoderna med kod.
Vårt första test är skrivet, en metod som i de flesta fall kommer se ifall vår tärningsmetod Dice.Roll() fungerar korrekt. Det kan finnas sällsynta fall då den ger grönt ljus även när metoden inte egentligen borde ge grönt, men så länge som man inte försökt lägga in något för att lura den så borde det fungera ganska bra.
Kommentarer i Engine- och Program-klasserna beskriver det planerade flödet för programmet så att vi kan börja lägga in metoder som gör att programmet faktiskt följer den planen vi har.

-----------------------------------

2021-04-04 20:30
Martin Berntson

Två nya klasser, Gamestate och Turn, är tillagda (men inte nödvändigtvis färdiga).
Två tester för Gamestate, en för att se att Turn-listan är tom när en ny Gamestate skapas, en för att se att AddTurn() lägger till ett objekt i listan.
Engine har uppdaterade kommentarer och fler ofyllda metoder, men jag tror att jag närmar mig en punkt där jag känner mig nöjd med hur programmet planeras köras.
Snart kan man alltså börja med riktigt kodande av logik, och när det väl börjar borde det bli spelbart snabbt...
Så länge som man har något interface i alla fall.
Player-klassen vet jag inte riktigt hur jag ska använda mig av just nu, får diskutera det nästa gruppmöte.
Så i kort gjorde jag lite arbete i 1-2h idag. Fastän planen var 4+.

-----------------------------------

2021-04-05 14:10
Martin Berntson, Robert von Krusenstjerna

Stökade om lite i klasserna så att värden som har samma funktion inte existerar i dublett, flyttade en eller annan metod så de ligger i en klass som egentligen borde hålla den, lite andra småsaker som så.
La till flera metoder som inte har logik än, fyllde ut Engine.GameLoop() med logik, finns mycket kvar innan det kan köras dock.
Kom fram till att vi kan behöva ett "Legal moves"-objekt eller nåt sånt? Osäker.
Ska fortsätta med mer senare idag.

-----------------------------------

2021-04-06 20:48
Martin Berntson, Robert von Krusenstjerna, Sanna Edström, Yan Rosén

Vi började dagen med lite grupparbete alla fyra.
Gjorde en del kodande i spelmotorn, separerade upp koden från Engine.cs i flera klasser då den började bli lite stor.
Skapade några tester för en metod för att se att den fungerade ordentligt, fler kommer behövas för andra metoder.
En initiell version av UI för spelet skapades, och diskussion kring ett API för att agera mellan spelmotorn och det program som ska presentera det diskuterades.

Martin och Robert tog lite extra kodande (och diskussion kring koden) på kvällen.

-----------------------------------

2021-04-07 17:05
Sanna Edström

Har försökt få igång själva spelbanan att fungera, det har varit mycket error och fix hela dagen och har ännu inte lyckas fått till det som jag önskar.
Svårast tycker jag är att "se" vad som händer i programmet då listBox har ännuen inte lyckats snappat up delar från engine klassen, då mycket inte fungerar har jag valt att raderar delar av det.
Jag har fått till att man kan skriva sitt namn och lägga i en List, men Listen är inte kopplad till engine klassen ännu så det blir enbart error när man kör det då spelarnamnet är tom.


-----------------------------------

2021-04-07 17:45
Martin Berntson

Vet inte om det blir något mer senare, men idag har jag i alla fall lyckats få spelmotorn att kunna spela ett spel utan spelare (har inte testat att spela manuellt, eller att spela en spelare + AI, men det borde gå snabbt att fixa eftersom i princip all kod för det finns i motorn redan).
Jag behövde tyvärr skippa den kod jag skrev för att låta andra spelare fortsätta efter att en hade vunnit då jag gjort något fel någonstans i den koden och inte är säker på om det är något jag borde prioritera just nu.
Att avsluta spelet så fort som en enskild spelare vunnit var lätt och effektivt att implementera, så det är i alla fall bra.



-----------------------------------

2021-04-09 16:00
Martin Berntson

Interface IDice och ISelector låter oss ha olika beteende mellan AI-spelare och mänskliga användare.
Moppade runt lite i Engine.cs; fanns ett flertal oanvända metoder, gammla kommentarer som inte var relevanta m.m.
Implementerade ConsoleDice, AIDice, ConsoleSelector och AISelector för att få spelet spelbart både med spelare och AI.
AI:n är... Väldigt, väldigt dum.
Fixade så att två instanser av spelet kan köra samtidigt utan de IndexOutOfBoundsExceptions (eller vad de nu heter) som jag fick i tidiga tester.
(Så går det när man gör en statisk incrementer utan att nollställa den efter setup...)

-----------------------------------

2021-04-09 16:15
Sanna Edström

Har påbörjat med Case Diagramet och fortsatt försöka luska ut hur man ska få form att fungera tillsammans med spelmotorn. 
Har varit mest ute på internet och googlat hur man ska få det att fungera och tittat på andra koder där folk har användt Form som UI i andra brädspel's program.
Som det ser ut nu så ser det lite mörkt ut med att få det att fungera som det ska, men kommer att fortsätta och hoppas att få till det. 
Alltenativet att rita ut en UI i själva konsol applikationen, men det får vi se senare.

-----------------------------------

2021-04-10 21:18
Martin Berntson

Kodade i ca. en halvtimme för att försöka få till en databas för att spara och ladda.
Spenderade sedan 90 minuter med felsökning innan jag bestämde mig för att helt enkelt ta och lösa det på ett smartare sätt (som kräver lite mer kod, men sparar mindre onödig information och som jag faktiskt vet exakt vad som sparas) imorgon. Detta ligger på en ny branch, så ni kan kolla på den om ni vill men det är inget fungerande just nu.

2021-04-11 11:20
Jag fortsatte med databasen från igår, men istället för att hoppas att den gör allt automatiskt så skapade jag modeller för inställningar och spelare att använda i databasen.
Det funkade bra för att spara, men när jag laddade blev det några småproblem.
Med hjälp från Stephan så hittade jag till slut lösningen, jag glömde att koppla tabellerna med Include()-anrop före min Where().
Med det fixat så tror jag att spelet nu kan både spara och ladda.
Har inte implementerat en replay-funktion...Men det vore i princip samma sak som att spara efter att spelet är slut, så tekniskt sett skulle det bara ta två eller tre rader kod att implementera sparning, och samma för laddning, men våran UI är inte så bra så jag skulle helst skippa det för tillfället.
